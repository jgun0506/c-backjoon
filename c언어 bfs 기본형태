#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>    // srand, rand 함수가 선언된 헤더 파일
#include <string.h>
#include <stdbool.h>
#include <stddef.h>
#include <math.h>

int board[502][502] =
{ {1,1,1,0,1,0,0,0,0,0},
 {1,0,0,0,1,0,0,0,0,0},
 {1,1,1,0,1,0,0,0,0,0},
 {1,1,0,0,1,0,0,0,0,0},
 {0,1,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0,0} };//1:파랑,0:빨강

struct P {
    int x;//행
    int y;//열
};

bool vis[502][502];//방문여부
int n = 7, m = 10;//n:행,m:열

int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };//상하좌우 네방향

int head = 0;
int tail = 0;

void push(struct P Q[], int x,int y) {//큐에 요소를 넣어줘야함
    Q[tail].x = x;
    Q[tail].y = y;
    tail++;
}

void pop() {
    head++;
}


int main()
{
    struct P Q[502];

    vis[0][0] = 1;//(0,0)이 시작점이기에 방문

    push(Q, 0, 0);//Q에 시작점인 (0,0) 삽입

    while (head != tail) {
        struct P cur = Q[head];
        pop();
        printf("( %d,%d )->", cur.x, cur.y);

        for (int i = 0; i < 4; i++) {//상하좌우칸 살펴보기
            int nx = cur.x + dx[i];
            int ny = cur.y + dy[i];//상하좌우칸의 좌표값

            if (nx < 0 || nx >= n || ny < 0 || ny >= m)//범위밖일경우 스킵
                continue;
            if (vis[nx][ny] || board[nx][ny] != 1)//이미방문했거나 파란색칸아닐경우
                continue;
            vis[nx][ny] = 1;//(nx,ny)방문함을 표시
            push(Q, nx, ny);
        }
    }

    return 0;

}



