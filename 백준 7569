#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>    // srand, rand 함수가 선언된 헤더 파일
#include <string.h>
#include <stdbool.h>
#include <stddef.h>
#include <math.h>

/*
1.break는 하나의 반복문만 탈출가능함
*/


struct P {
    int x;
    int y;
    int z;
};

int dx[6] = { 0,1,0,-1,0,0 };
int dy[6] = { 1,0,-1,0,0,0 };
int dz[6] = { 0,0,0,0,1,-1 };
int head = 0;
int tail = 0;

int box[101][101][101];
int dist[101][101][101];

void push(struct P *Q,int z,int y,int x) {
    Q[tail].x = x;
    Q[tail].y = y;
    Q[tail].z = z;
    tail++;
}

void pop() {
    head++;
}

int main()
{
    int n, m, h;

    scanf("%d %d %d", &m, &n, &h);

    struct P* Q = malloc(sizeof(struct P) * m * n * h);

    for (int k = 0; k < h; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                scanf("%d", &box[k][i][j]);
            }
        }
    }
    for (int z = 0; z < 101; z++) {
        for (int y = 0; y < 101; y++) {//-1로 초기화
            for (int x = 0; x < 101; x++) {
                dist[z][y][x] = -1;
            }
        }
    }
    for (int z = 0; z < h; z++) {
        for (int y = 0; y < n; y++) {//익은감 시작점
            for (int x = 0; x < m; x++) {
                if (box[z][y][x] == 1) {
                    push(Q, z, y, x);
                    dist[z][y][x] = 0;
                }
            }
        }
    }

    while (head != tail) {
        struct P cur = Q[head];
        pop();

        for (int i = 0; i < 6; i++) {
            int nx = cur.x + dx[i];
            int ny = cur.y + dy[i];
            int nz = cur.z + dz[i];

            if (nx < 0 || nx >= m || ny < 0 || ny >= n || nz < 0 || nz >= h)
                continue;
            if (box[nz][ny][nx] == -1 || dist[nz][ny][nx] != -1)//익은감 or 감이 없을경우
                continue;
            box[nz][ny][nx] = 1;
            dist[nz][ny][nx] = dist[cur.z][cur.y][cur.x] + 1;
            push(Q, nz, ny, nx);
        }
    }

    int ans = 0;

    for (int z = 0; z < h; z++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (box[z][i][j] == 0) {
                    ans = -1;
                    printf("%d", ans);
                    return 0;
                }

                else if (ans < dist[z][i][j]) {
                    ans = dist[z][i][j];
                }
            }
            if (ans == -1) {
                ans = -1;
                printf("%d", ans);
                return 0;
            }
        }
    }
    printf("%d", ans);

    return 0;
}


